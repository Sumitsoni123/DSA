Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int lengthLL(ListNode *head) {
        int cnt = 0;
        while(head != nullptr) {
            cnt++;
            head = head->next;
        }
        return cnt;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        int lengthA = lengthLL(headA);
        int lengthB = lengthLL(headB);

        if(lengthA > lengthB) {
            for(int i=0; i<(lengthA-lengthB); i++)
                headA = headA->next;
        } else {
            for(int i=0; i<(lengthB-lengthA); i++)
                headB = headB->next;
        }

        while(headA != headB) {
            headA = headA->next;
            headB = headB->next;
        }

        return headA;
    }
};
