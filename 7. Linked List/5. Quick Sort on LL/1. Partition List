Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *lHead = new ListNode(-1);
        ListNode *lTail = lHead;

        ListNode *rHead = new ListNode(-1);
        ListNode *rTail = rHead;

        while(head != nullptr) {
            if(head->val < x) {
                lTail->next = head;
                lTail = head;
            } else {
                rTail->next = head;
                rTail = head;
            }

            head = head->next;
        }
        lTail->next = rHead->next;
        rTail->next = NULL;
        return lHead->next;
    }
};
