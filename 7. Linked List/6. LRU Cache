class LRUCache {
public:
    struct Node {
        int key;
        int val;
        Node* prev;
        Node* next;
        Node(int key, int val) {
            this->key = key;
            this->val = val;
            this->prev = this->next = nullptr;
        }
    };

    int capacity, size;
    Node* head;
    Node* tail;
    unordered_map<int, Node*> hm;

    LRUCache(int capacity) {
        this->capacity = capacity;
        this->size = 0;
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head->next = tail;
        tail->prev = head;
    }

    int get(int key) {
        if (hm.find(key) == hm.end()) {
            return -1;
        }

        // removing from there and putting it in front
        Node* curr = hm[key];
        curr->prev->next = curr->next;
        curr->next->prev = curr->prev;

        curr->prev = head;
        curr->next = head->next;
        head->next->prev = curr;
        head->next = curr;

        return curr->val;
    }

    void put(int key, int value) {
        if (hm.find(key) == hm.end()) {
            Node* curr = new Node(key, value);
            if (size == capacity) {
                Node* temp = tail->prev;
                temp->prev->next = temp->next;
                temp->next->prev = temp->prev;
                hm.erase(temp->key);
                delete temp;
            } else {
                size++;
            }

            curr->prev = head;
            curr->next = head->next;
            head->next->prev = curr;
            head->next = curr;

            hm[key] = curr;
        } else {
            // removing and putting updated node at front of LL
            Node* curr = hm[key];
            curr->prev->next = curr->next;
            curr->next->prev = curr->prev;

            curr->prev = head;
            curr->next = head->next;
            head->next->prev = curr;
            head->next = curr;

            curr->val = value;
        }
    }
};
