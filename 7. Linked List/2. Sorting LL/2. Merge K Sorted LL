You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* merge2Lists(ListNode* list1, ListNode* list2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* tail = dummy;

        while(list1 && list2) {
            if(list1->val <= list2->val) {
                tail->next = list1;
                list1 = list1->next;
            } else {
                tail->next = list2;
                list2 = list2->next;
            }
            tail = tail->next;
        }

        tail->next = list1? list1: list2;

        return dummy->next;
    }

    ListNode* helper(vector<ListNode*>& lists, int left, int right) {

        if(left > right) return nullptr;
        if(left == right) return lists[left];

        int mid = left + (right-left)/2;
        ListNode* l1 = helper(lists, left, mid);
        ListNode* l2 = helper(lists, mid+1, right);

        return merge2Lists(l1, l2);
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)    
            return nullptr;
        return helper(lists, 0, lists.size()-1);
    }
};
