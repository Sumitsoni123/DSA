You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* head = dummy;
        ListNode* tail = dummy;
        int carry = 0;
        while(l1 != NULL || l2 != NULL || carry >0) {
            
            int d1 = (l1 != nullptr)? l1->val: 0;
            int d2 = (l2 != nullptr)? l2->val: 0;

            int sum = d1+d2+carry;
            carry = sum/10;
            ListNode* temp = new ListNode(sum%10);

            tail->next = temp;
            tail = temp;

            if(l1 != nullptr) l1 = l1->next;
            if(l2 != nullptr) l2 = l2->next;
        }
        return dummy->next;
    }
};
