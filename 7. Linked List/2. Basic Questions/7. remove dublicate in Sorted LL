#include <iostream>

class Node {
public:
    int data;
    Node* next;
};

class LinkedList {
public:
    Node* head;
    Node* tail;
    int size;

    LinkedList() : head(nullptr), tail(nullptr), size(0) {}

    void addLast(int val) {
        Node* temp = new Node();
        temp->data = val;
        temp->next = nullptr;

        if (size == 0) {
            head = tail = temp;
        } else {
            tail->next = temp;
            tail = temp;
        }

        size++;
    }

    int getSize() {
        return size;
    }

    void display() {
        for (Node* temp = head; temp != nullptr; temp = temp->next) {
            std::cout << temp->data << " ";
        }
        std::cout << std::endl;
    }

    void removeFirst() {
        if (size == 0) {
            std::cout << "List is empty" << std::endl;
        } else if (size == 1) {
            delete head;
            head = tail = nullptr;
            size = 0;
        } else {
            Node* temp = head;
            head = head->next;
            delete temp;
            size--;
        }
    }

    int getFirst() {
        if (size == 0) {
            std::cout << "List is empty" << std::endl;
            return -1;
        } else {
            return head->data;
        }
    }

    int getLast() {
        if (size == 0) {
            std::cout << "List is empty" << std::endl;
            return -1;
        } else {
            return tail->data;
        }
    }

    int getAt(int idx) {
        if (size == 0) {
            std::cout << "List is empty" << std::endl;
            return -1;
        } else if (idx < 0 || idx >= size) {
            std::cout << "Invalid arguments" << std::endl;
            return -1;
        } else {
            Node* temp = head;
            for (int i = 0; i < idx; i++) {
                temp = temp->next;
            }
            return temp->data;
        }
    }

    void addFirst(int val) {
        Node* temp = new Node();
        temp->data = val;
        temp->next = head;
        head = temp;

        if (size == 0) {
            tail = temp;
        }

        size++;
    }

    void addAt(int idx, int val) {
        if (idx < 0 || idx > size) {
            std::cout << "Invalid arguments" << std::endl;
        } else if (idx == 0) {
            addFirst(val);
        } else if (idx == size) {
            addLast(val);
        } else {
            Node* node = new Node();
            node->data = val;

            Node* temp = head;
            for (int i = 0; i < idx - 1; i++) {
                temp = temp->next;
            }
            node->next = temp->next;

            temp->next = node;
            size++;
        }
    }

    void removeLast() {
        if (size == 0) {
            std::cout << "List is empty" << std::endl;
        } else if (size == 1) {
            delete head;
            head = tail = nullptr;
            size = 0;
        } else {
            Node* temp = head;
            for (int i = 0; i < size - 2; i++) {
                temp = temp->next;
            }

            delete temp->next;
            tail = temp;
            tail->next = nullptr;
            size--;
        }
    }

    void removeAt(int idx) {
        if (idx < 0 || idx >= size) {
            std::cout << "Invalid arguments" << std::endl;
        } else if (idx == 0) {
            removeFirst();
        } else if (idx == size - 1) {
            removeLast();
        } else {
            Node* temp = head;
            for (int i = 0; i < idx - 1; i++) {
                temp = temp->next;
            }

            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
            size--;
        }
    }

    Node* getNodeAt(int idx) {
        Node* temp = head;
        for (int i = 0; i < idx; i++) {
            temp = temp->next;
        }
        return temp;
    }

    void reverseDI() {
        int li = 0;
        int ri = size - 1;
        while (li < ri) {
            Node* left = getNodeAt(li);
            Node* right = getNodeAt(ri);

            int temp = left->data;
            left->data = right->data;
            right->data = temp;

            li++;
            ri--;
        }
    }

    void reversePI() {
        if (size <= 1) {
            return;
        }

        Node* prev = nullptr;
        Node* curr = head;
        while (curr != nullptr) {
            Node* next = curr->next;

            curr->next = prev;
            prev = curr;
            curr = next;
        }

        Node* temp = head;
        head = tail;
        tail = temp;
    }

    int kthFromLast(int k) {
        Node* slow = head;
        Node* fast = head;
        for (int i = 0; i < k; i++) {
            fast = fast->next;
        }

        while (fast != tail) {
            slow = slow->next;
            fast = fast->next;
        }

        return slow->data;
    }

    int mid() {
        Node* f = head;
        Node* s = head;

        while (f->next != nullptr && f->next->next != nullptr) {
            f = f->next->next;
            s = s->next;
        }

        return s->data;
    }

    static LinkedList mergeTwoSortedLists(LinkedList l1, LinkedList l2) {
        LinkedList ml;

        Node* one = l1.head;
        Node* two = l2.head;
        while (one != nullptr && two != nullptr) {
            if (one->data < two->data) {
                ml.addLast(one->data);
                one = one->next;
            } else {
                ml.addLast(two->data);
                two = two->next;
            }
        }

        while (one != nullptr) {
            ml.addLast(one->data);
            one = one->next;
        }

        while (two != nullptr) {
            ml.addLast(two->data);
            two = two->next;
        }

        return ml;
    }

    static Node* midNode(Node* head, Node* tail) {
        Node* f = head;
        Node* s = head;

        while (f != tail && f->next != tail) {
            f = f->next->next;
            s = s->
