#include <iostream>
#include <sstream>

using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class LinkedList {
public:
    Node* head;
    Node* tail;
    int size;

    LinkedList() {
        head = tail = nullptr;
        size = 0;
    }

    void addLast(int val) {
        Node* temp = new Node();
        temp->data = val;
        temp->next = nullptr;

        if (size == 0) {
            head = tail = temp;
        } else {
            tail->next = temp;
            tail = temp;
        }

        size++;
    }

    int getSize() {
        return size;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void removeFirst() {
        if (size == 0) {
            cout << "List is empty" << endl;
        } else if (size == 1) {
            head = tail = nullptr;
            size = 0;
        } else {
            Node* temp = head;
            head = head->next;
            delete temp;
            size--;
        }
    }

    int getFirst() {
        if (size == 0) {
            cout << "List is empty" << endl;
            return -1;
        } else {
            return head->data;
        }
    }

    int getLast() {
        if (size == 0) {
            cout << "List is empty" << endl;
            return -1;
        } else {
            return tail->data;
        }
    }

    int getAt(int idx) {
        if (size == 0) {
            cout << "List is empty" << endl;
            return -1;
        } else if (idx < 0 || idx >= size) {
            cout << "Invalid arguments" << endl;
            return -1;
        } else {
            Node* temp = head;
            for (int i = 0; i < idx; i++) {
                temp = temp->next;
            }
            return temp->data;
        }
    }

    void addFirst(int val) {
        Node* temp = new Node();
        temp->data = val;
        temp->next = head;
        head = temp;

        if (size == 0) {
            tail = temp;
        }

        size++;
    }

    void addAt(int idx, int val) {
        if (idx < 0 || idx > size) {
            cout << "Invalid arguments" << endl;
        } else if (idx == 0) {
            addFirst(val);
        } else if (idx == size) {
            addLast(val);
        } else {
            Node* node = new Node();
            node->data = val;

            Node* temp = head;
            for (int i = 0; i < idx - 1; i++) {
                temp = temp->next;
            }
            node->next = temp->next;

            temp->next = node;
            size++;
        }
    }

    void removeLast() {
        if (size == 0) {
            cout << "List is empty" << endl;
        } else if (size == 1) {
            delete head;
            head = tail = nullptr;
            size = 0;
        } else {
            Node* temp = head;
            while (temp->next != tail) {
                temp = temp->next;
            }

            delete tail;
            tail = temp;
            tail->next = nullptr;
            size--;
        }
    }

    void removeAt(int idx) {
        if (idx < 0 || idx >= size) {
            cout << "Invalid arguments" << endl;
        } else if (idx == 0) {
            removeFirst();
        } else if (idx == size - 1) {
            removeLast();
        } else {
            Node* temp = head;
            for (int i = 0; i < idx - 1; i++) {
                temp = temp->next;
            }

            Node* toRemove = temp->next;
            temp->next = toRemove->next;
            delete toRemove;
            size--;
        }
    }

    Node* getNodeAt(int idx) {
        Node* temp = head;
        for (int i = 0; i < idx; i++) {
            temp = temp->next;
        }
        return temp;
    }

    void reverseDI() {
        int li = 0;
        int ri = size - 1;
        while (li < ri) {
            Node* left = getNodeAt(li);
            Node* right = getNodeAt(ri);

            int temp = left->data;
            left->data = right->data;
            right->data = temp;

            li++;
            ri--;
        }
    }

    void reversePI() {
        if (size <= 1) {
            return;
        }

        Node* prev = nullptr;
        Node* curr = head;
        while (curr != nullptr) {
            Node* next = curr->next;

            curr->next = prev;
            prev = curr;
            curr = next;
        }

        Node* temp = head;
        head = tail;
        tail = temp;
    }

    int kthFromLast(int k) {
        Node* slow = head;
        Node* fast = head;
        for (int i = 0; i < k; i++) {
            fast = fast->next;
        }

        while (fast != tail) {
            slow = slow->next;
            fast = fast->next;
        }

        return slow->data;
    }

    int mid() {
        Node* f = head;
        Node* s = head;

        while (f->next != nullptr && f->next->next != nullptr) {
            f = f->next->next;
            s = s->next;
        }

        return s->data;
    }

    static LinkedList mergeTwoSortedLists(LinkedList l1, LinkedList l2) {
        LinkedList ml;

        Node* one = l1.head;
        Node* two = l2.head;
        while (one != nullptr && two != nullptr) {
            if (one->data < two->data) {
                ml.addLast(one->data);
                one = one->next;
            } else {
                ml.addLast(two->data);
                two = two->next;
            }
        }

        while (one != nullptr) {
            ml.addLast(one->data);
            one = one->next;
        }

        while (two != nullptr) {
            ml.addLast(two->data);
            two = two->next;
        }

        return ml;
    }

    static Node* midNode(Node* head, Node* tail) {
        Node* f = head;
        Node* s = head;

        while (f != tail && f->next != tail) {
            f = f->next->next;
            s = s->next;
        }

        return s;
    }

    static LinkedList mergeSort(Node* head, Node* tail) {
        if (head == tail) {
            LinkedList br;
            br.addLast(head->data);
            return br;
        }

        Node* mid = midNode(head, tail);
        LinkedList fsh = mergeSort(head, mid);
        LinkedList ssh = mergeSort(mid->next, tail);
        LinkedList sl = mergeTwoSortedLists(fsh, ssh);
        return sl;
    }

    void removeDuplicates() {
        LinkedList res;

        while (size > 0) {
            int val = getFirst();
            removeFirst();

            if (res.size == 0 || val != res.tail->data) {
                res.addLast(val);
            }
        }

        head = res.head;
        tail = res.tail;
        size = res.size;
    }

    void oddEven() {
        LinkedList odd;
        LinkedList even;

        while (size > 0) {
            int val = getFirst();
            removeFirst();

            if (val % 2 == 0) {
                even.addLast(val);
            } else {
                odd.addLast(val);
            }
        }

        if (odd.size > 0 && even.size > 0) {
            odd.tail->next = even.head;

            head = odd.head;
            tail = even.tail;
            size = odd.size + even.size;
        } else if (odd.size > 0) {
            head = odd.head;
            tail = odd.tail;
            size = odd.size;
        } else if (even.size > 0) {
            head = even.head;
            tail = even.tail;
            size = even.size;
        }
    }

    void kReverse(int k) {
        LinkedList* prev = nullptr;

        while (size > 0) {
            LinkedList* curr = new LinkedList();

            if (size >= k) {
                for (int i = 0; i < k; i++) {
                    int val = getFirst();
                    removeFirst();
                    curr->addFirst(val);
                }
            } else {
                int sz = size;
                for (int i = 0; i < sz; i++) {
                    int val = getFirst();
                    removeFirst();
                    curr->addLast(val);
                }
            }

            if (prev == nullptr) {
                prev = curr;
            } else {
                prev->tail->next = curr->head;
                prev->tail = curr->tail;
                prev->size += curr->size;
            }
        }

        head = prev->head;
        tail = prev->tail;
        size = prev->size;
    }

    void displayReverseHelper(Node* node) {
        if (node == nullptr) {
            return;
        }
        displayReverseHelper(node->next);
        cout << node->data << " ";
    }

    void displayReverse() {
        displayReverseHelper(head);
        cout << endl;
    }

    void reversePRHelper(Node* node) {
        if (node == tail) {
            return;
        }
        reversePRHelper(node->next);
        node->next->next = node;
    }

    void reversePR() {
        reversePRHelper(head);
        Node* temp = head;
        head = tail;
        tail = temp;
        tail->next = nullptr;
    }

    Node* reverseDRHelper(Node* left, Node* right, int counter) {
        if (right == nullptr) {
            return left;
        }

        left = reverseDRHelper(left, right->next, counter + 1);

        if (counter >= size / 2) {
            int temp = right->data;
            right->data = left->data;
            left->data = temp;
        }

        left = left->next;
        return left;
    }

    void reverseDR() {
        Node* left = head;
        int counter = 0;
        reverseDRHelper(head, head, counter);
    }
};

int main() {
    int n1;
    cin >> n1;

    LinkedList l1;
    for (int i = 0; i < n1; i++) {
        int d;
        cin >> d;
        l1.addLast(d);
    }

    int a, b;
    cin >> a >> b;

    l1.display();
    l1.reverseDR();
    l1.addLast(a);
    l1.addFirst(b);
    l1.display();

    return 0;
}
