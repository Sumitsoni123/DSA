#include <iostream>
using namespace std;

class ListNode
{
public:
  int val = 0;
  ListNode* next = nullptr;

  ListNode(int val)
  {
    this->val = val;
  }
};

ListNode* reverseLL(ListNode* head)
{
    if(head == nullptr || head->next == nullptr)
        return head;
    
    ListNode* prev = nullptr;
    ListNode* curr = head;
    ListNode* currNext = nullptr;
    
    while(curr != nullptr)
    {
        currNext = curr->next;
        
        curr->next = prev;
        prev = curr;
        curr = currNext;
    }
    
    return prev;
}

void unfold(ListNode* head)
{
    if(head == nullptr || head->next == nullptr)
        return;
    
    ListNode* h1 = head;
    ListNode* t1 = h1;
    
    ListNode* h2 = head->next;
    ListNode* t2 = h2;
    
    while(t2 != nullptr && t2->next != nullptr)
    {
        // backup
        ListNode* temp = t2->next;
        
        // links
        t1->next = temp;
        t2->next = temp->next;
        
        // moves
        t1 = t1->next;
        t2 = t2->next;
    }
    
    t1->next = nullptr;
    h2 = reverseLL(h2);
    
    t1->next = h2;
}

void printList(ListNode* node)
{
  ListNode* curr = node;
  while (curr != nullptr)
  {
    cout << curr->val << " ";
    curr = curr->next;
  }
  cout << endl;
}

int main()
{
  int n;
  cin >> n;
  ListNode* dummy = new ListNode(-1);
  ListNode* prev = dummy;
  while (n-- > 0)
  {
    int val;
    cin >> val;
    prev->next = new ListNode(val);
    prev = prev->next;
  }

  ListNode* head = dummy->next;
  unfold(head);
  printList(head);

  return 0;
}
