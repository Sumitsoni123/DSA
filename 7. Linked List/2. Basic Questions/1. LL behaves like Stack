#include <iostream>
#include <list>
#include <string>

class LLToStackAdapter {
private:
    std::list<int> list;

public:
    int size() {
        return list.size();
    }

    void push(int val) {
        list.push_front(val);
    }

    int pop() {
        if (list.empty()) {
            std::cout << "Stack underflow" << std::endl;
            return -1; // or throw an exception
        }

        int val = list.front();
        list.pop_front();
        return val;
    }

    int top() {
        if (list.empty()) {
            std::cout << "Stack underflow" << std::endl;
            return -1; // or throw an exception
        }

        return list.front();
    }
};

int main() {
    LLToStackAdapter st;

    std::string str;
    while (true) {
        std::getline(std::cin, str);

        if (str == "quit") {
            break;
        } else if (str.compare(0, 4, "push") == 0) {
            int val = std::stoi(str.substr(5));
            st.push(val);
        } else if (str == "pop") {
            int val = st.pop();
            if (val != -1) {
                std::cout << val << std::endl;
            }
        } else if (str == "top") {
            int val = st.top();
            if (val != -1) {
                std::cout << val << std::endl;
            }
        } else if (str == "size") {
            std::cout << st.size() << std::endl;
        }
    }

    return 0;
}
