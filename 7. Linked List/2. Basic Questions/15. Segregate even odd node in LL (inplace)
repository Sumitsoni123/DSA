#include <iostream>
using namespace std;

class ListNode
{
public:
    int val = 0;
    ListNode *next = nullptr;

    ListNode(int val)
    {
        this->val = val;
    }
};

ListNode *segregateEvenOdd(ListNode *head)
{
    ListNode *evenDummy = new ListNode(-1);
    ListNode *oddDummy = new ListNode(-1);
    
    ListNode *oddHead = oddDummy, *oddTail = oddDummy;
    ListNode *evenHead = evenDummy, *evenTail = evenDummy;
    ListNode *curr = head;
    
    while(curr != nullptr)
    {
        if((curr->val)%2 == 0)
        {
            evenTail->next = curr;
            evenTail = curr;
        }
        else
        {
            oddTail->next = curr;
            oddTail = curr;
        }
        curr = curr->next;
    }
    
    if(evenHead->next == nullptr)
    {
        oddTail->next = nullptr;
        return oddHead->next;
    }
    else if(oddHead->next == nullptr)
    {
        evenTail->next = nullptr;
        return evenHead->next;
    }
    else 
    {
        evenTail->next = oddHead->next;
        oddHead->next = nullptr;
        return evenHead->next;
    }
}

int main()
{
    int n;
    cin >> n;
    ListNode *dummy = new ListNode(-1);
    ListNode *prev = dummy;
    while (n-- > 0)
    {
        int val;
        cin >> val;
        prev->next = new ListNode(val);
        prev = prev->next;
    }

    ListNode *head = segregateEvenOdd(dummy->next);
    while (head != nullptr)
    {
        cout << head->val << " ";
        head = head->next;
    }
    return 0;
}
