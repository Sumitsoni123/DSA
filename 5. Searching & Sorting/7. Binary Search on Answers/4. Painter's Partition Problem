Given 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.
 You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.

Calculate and return the minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of the board.
 NOTE: 
 1. 2 painters cannot share a board to paint. That is to say, a board cannot be painted partially by one painter, and partially by another.
 2. A painter will only paint contiguous boards. This means a configuration where painter 1 paints boards 1 and 3 but not 2 is invalid.

 Return the ans % 10000003.
 
 
 
 #define m 10000003
int isPossible(vector<int> &arr, int k, long long int mid)
{
    int cnt = 1;
    long long int currSum = 0;
    for(int i=0; i<arr.size(); i++)
    {
        if(currSum + arr[i] <=mid)
            currSum += arr[i];
        else
        {
            cnt ++;
            if(cnt > k || arr[i] > mid)
                return 0;
            currSum = arr[i];
        }
    }
    return 1;
}


int Solution::paint(int k, int B, vector<int> &arr) {
    long long int sum = 0;
    for(int i=0; i<arr.size(); i++)
        sum += (arr[i])%m;
    
    long long int l = 0, r = sum%m, ans;
    while(l <= r)
    {
        long long int mid = (l+r)/2;
        if(isPossible(arr, k, mid))
        {
            ans = mid;
            r = mid - 1;
        }
        else
            l = mid + 1;
    }
    
    return (ans*B)%m;
}
