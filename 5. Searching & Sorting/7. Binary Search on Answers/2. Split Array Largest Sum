Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.



class Solution {
public:
    
    bool isPossible(vector<int> &nums, int m, int mid)
    {
        int block = 1;
        int sum = 0;
        
        for(int i=0; i<nums.size(); i++)
        {
            if(sum + nums[i] <=mid)
                sum += nums[i];
            else
            {
                block++;
                if(block > m || nums[i] > mid)
                    return false;
                sum = nums[i];
            }
        }
        return true;
        
    }
    
    int splitArray(vector<int>& nums, int m) {
        
        int sum = 0;
        for(int i=0; i<nums.size(); i++)
            sum += nums[i];
        
        int l = 0, r = sum, ans;
        while(l <= r)
        {
            int mid = l+(r-l)/2;
            
            if(isPossible(nums, m, mid))
            {
                ans = mid;
                r = mid-1;
            }
            else
                l = mid+1;
        }
        return ans;
        
    }
};
