Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.


class Solution{
  public:
    
    long long merge(long long arr[], long long l, long long mid, long long r)
    {
        long long n1 = mid-l+1;
        long long n2 = r - mid;
        long long left[n1], right[n2];
        
        for(long long i = 0; i < n1; i++)
        {
            left[i] = arr[l + i];
        }
        
        for(long long i = 0; i < n2; i++)
        {
            right[i] = arr[mid + i + 1];
        }
        
        long long i = 0, j = 0, k = l;
        long long res = 0;
        
        while(i < n1 && j < n2)
        {
            if(left[i] <= right[j])
            {
                arr[k++] = left[i++];
            }
            else
            {
                arr[k++] = right[j++];
                res += (n1 - i);
            }
        }
        
        while(i < n1)
        {
            arr[k++] = left[i++];
        }
        
        while(j < n2)
        {
            arr[k++] = right[j++];
        }
        
        return res;
    }
    
    long long mergeSort(long long arr[], long long low, long long high)
    {
        long long res = 0;
        
        if(low < high)
        {
            long long mid = low + (high - low)/2;
            
            res += mergeSort(arr, low, mid);
            res += mergeSort(arr, mid + 1, high);
            
            res += merge(arr, low, mid, high);
        }
        
        return res;
    }
    
    long long int inversionCount(long long arr[], long long n)
    {
        // Your Code Here
        return mergeSort(arr, 0, n-1);
    }

};
