A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.



class Solution {
public:
    int findPeakElement(vector<int>& a) {
        int i = 0;
        int j = a.size()-1;
        
        while(i<=j)
        {
            int mid=i+(j-i)/2;
            int lval = (mid-1>=0)? a[mid-1]: INT_MIN;
            int rval = (mid+1<a.size())? a[mid+1]: INT_MIN;

            if(lval<a[mid] && a[mid]>rval){
                return mid;
            }
            else if(lval > a[mid]){
                j = mid-1;
            }
            else if(a[mid] < rval){
                i = mid+1;
            }
            else if(lval == INT_MIN || rval == INT_MIN){
                 return mid;
            }
            
        }
        return -1;
    }
};
