An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.



class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        
        int l = 0, r = arr.size()-1;
        
        while(l <= r)
        {
            int mid = l+(r-l)/2;
            
            int lval = (mid-1 >=0)? arr[mid-1]: INT_MIN;
            int rval = (mid+1 <= r)? arr[mid+1]: INT_MIN;
            
            if(arr[mid] > lval && arr[mid] > rval)
                return mid;
            
            if(arr[mid] < rval)
                l = mid+1;
            else
                r = mid-1;
                
        }
        return -1;
    }
};
