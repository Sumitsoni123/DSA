Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.



public class Solution {

    public int peak(int[] arr)
    {
        int l = 0, r = arr.length-1;
        
        while(l<=r)
        {
            int mid = l +(r-l)/2;
            int lval = (mid-1>=0)? arr[mid-1]: Integer.MIN_VALUE;
            int rval = (mid+1<arr.length)? arr[mid+1]: Integer.MIN_VALUE;
            
            
            if(arr[mid] >lval && arr[mid]>rval)
                return mid;
            
            else if(arr[mid] > lval && arr[mid] < rval)
                l = mid+1;
            else if(arr[mid] < lval && arr[mid] > rval)
                r = mid-1;
            else
            {
                // in case of dublicate ->O(N)
                if(arr[l] <= arr[r])
                    l++;
                else
                    r--;
            }
        }
        
        return -1;
    }

    public int bsearch(int[] arr, int l, int r, int target, boolean isInc)
    {
        if(l<=r)
        {
            int mid = l +(r-l)/2;
            if(arr[mid] == target)
                return mid;

            if((isInc == true && target > arr[mid]) || (isInc == false && target < arr[mid]))    
                return bsearch(arr, mid+1, r, target, isInc);

            else 
                 return bsearch(arr, l, mid-1, target, isInc);
        }
        return -1;
    }

    public int solve(int[] arr, int target) 
    {
        int peakIdx = peak(arr);

        if(arr[peakIdx] == target)
            return peakIdx;

        if(arr[peakIdx] < target)
            return -1;

        int left = bsearch(arr, 0, peakIdx, target, true);
        if(left != -1)  return left;

        int right = bsearch(arr, peakIdx, arr.length-1, target, false);
        return right;        
    }
}
