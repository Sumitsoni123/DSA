There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.



class Solution {
public:
    
    int getPvt(vector<int>& arr) {
        int l = 0, r = arr.size()-1;
        
        while(l<r)
        {
            int mid = (l+r)/2;
            if(arr[mid] <arr[r])
                r = mid;
            else
                l = mid+1;
        }
        
        return l;
    }
    
    int bsearch(vector<int>& arr, int l, int r, int k) {
        
        while(l <= r)
        {
            int mid = (l+r)/2;
            
            if(k < arr[mid])
                r = mid-1;
            else if(k > arr[mid])
                l = mid+1;
            else
                return mid;
        }
        return -1;
    }
    
    int search(vector<int>& arr, int k) {
        
        int pvt = getPvt(arr);
        int n = arr.size();
        
        if(arr[pvt] <= k && k <= arr[n-1])
            return bsearch(arr, pvt, n-1, k);
        
        else
            return bsearch(arr, 0, pvt-1, k);
    }
};
