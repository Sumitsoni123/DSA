Given an ascending sorted rotated array Arr of distinct integers of size N. The array is right rotated K times. Find the value of K.




class Solution {
    
    boolean isMin(int[]nums, int mid)
    {
        int lv = (mid-1<0)? Integer.MAX_VALUE: nums[mid-1];
        int rv = (mid+1 >=nums.length)? Integer.MAX_VALUE: nums[mid+1];
        
        return (nums[mid]< lv && nums[mid]< rv)? true: false;
            
    }
    
    boolean isMax(int[]nums, int mid)
    {
        int lv = (mid-1<0)? Integer.MIN_VALUE: nums[mid-1];
        int rv = (mid+1 >=nums.length)? Integer.MIN_VALUE: nums[mid+1];
        
        return (nums[mid]> lv && nums[mid]> rv)? true: false;
            
    }
    
    int findMin(int[] nums) {
        int l=0, r = nums.length-1;
        
        if(nums[l]<nums[r])
            return l;
        
        while(l<=r)
        {
            int mid = l+(r-l)/2;
            
            if(isMin(nums, mid))
                return mid;
            
            else if(isMax(nums, mid))
                return mid+1;
            
            else if(nums[l]<nums[mid])
                l = mid+1;
            else if(nums[l]>nums[mid])
                r = mid-1;
        }
        return 0;
    }
    
    int findKRotation(int arr[], int n) {
        // code here
        return findMin(arr);
    }
}
