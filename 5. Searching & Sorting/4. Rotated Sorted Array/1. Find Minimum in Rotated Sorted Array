Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


class Solution {
public:
    bool isMinimum(vector<int>& arr, int mid) {
        int lval = (mid-1 >0)? arr[mid-1]: INT_MAX;
        int rval = (mid+1 < arr.size())? arr[mid+1]: INT_MAX;

        if(lval > arr[mid] && arr[mid] < rval)
            return true;
        return false;    
    }
    
    bool isMaximum(vector<int>& arr, int mid) {
        int lval = (mid-1 >0)? arr[mid-1]: INT_MIN;
        int rval = (mid+1 < arr.size())? arr[mid+1]: INT_MIN;

        if(lval < arr[mid] && arr[mid] > rval)
            return true;
        return false;    
    }

    int findMin(vector<int>& arr) {
        if(arr[0] < arr[arr.size()-1])
            return arr[0];

        int l = 0, r = arr.size()-1;
        
        while(l<=r)
        {
            int mid = (l+r)/2;
            
            if(isMinimum(arr, mid))
                return arr[mid];
            else if(isMaximum(arr, mid))
                return arr[mid+1];
            else if(arr[mid] < arr[r])
                r = mid-1;
            else 
                l = mid+1;
        }
        return 0;
    }
};
