Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].



class Solution {
public:
    
    int inversionCnt(vector<int> &arr, int l, int mid, int r)
    {
        int cnt = 0;
        int i = l, j = mid+1, k=0;
        while(i <= mid && j <= r)
        {
            if((long)arr[i] <= 2*(long)arr[j])
            {
                k++; i++;
            }
            else
            {
                cnt +=(mid-i+1);
                k++; j++;
            }    
        }
        return cnt;
    }
    
    int merge(vector<int> &arr, int l, int mid, int r)
    {
        int ans[r-l+1];
        int cnt = inversionCnt(arr, l, mid, r);
        int i = l, j = mid+1, k=0;
        while(i <= mid && j <= r)
        {
            if(arr[i] <= arr[j])
            {
                ans[k++] = arr[i++];
            }
            else
            {
                ans[k++] = arr[j++];
            }    
        }
        
        while(i <= mid)
        {
            ans[k++] = arr[i++];
        }
        
        while(j <= r)
        {
            ans[k++] = arr[j++];
        }
        
        for(k=l; k<=r; k++)
            arr[k] = ans[k-l];
        
        return cnt;
    }
    
    int mergeSort(vector<int> &arr, int l, int r)
    {
        int ans = 0;
        if(l < r)
        {
            int mid = l + (r - l)/2;
            ans += mergeSort(arr, l, mid);
            ans += mergeSort(arr, mid+1, r);
            ans += merge(arr, l, mid, r);
        }
        return ans;
        
    }
    
    int reversePairs(vector<int>& nums) {
        
        return mergeSort(nums, 0, nums.size()-1);
    }
};
