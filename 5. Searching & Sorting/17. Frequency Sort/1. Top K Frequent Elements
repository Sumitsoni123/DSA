class Solution {
public:
    vector<int> topKFrequent(vector<int>& arr, int k)
    {
        unordered_map<int,int> m;
        for(auto i:arr)
            m[i]++;
        
        // min heap push pop log(n) for each element
        // tc = (n + nlogk + klogk)
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        for(auto [p,q]:m) {
            pq.push({q,p});
            if(pq.size() >k)
                pq.pop();
        }    
        
        vector<int> res;
        while(k--){
            res.push_back(pq.top().second);
            pq.pop();           
        }
        return res;
    }
};
