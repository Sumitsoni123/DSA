You are given an array 'arr' containing 'n' non-negative integers.
Your task is to partition this array into two subsets such that the absolute difference between subset sums is minimum.
You just need to find the minimum absolute difference considering any valid division of the array elements.


int minSubsetSumDifference(vector<int>& nums, int n)
{
	// Write your code here.
	int k = 0;
    for (auto e : nums)
        k += e;

    vector<bool> dp(k + 1, false), curr(k + 1, false);
    dp[0] = true;

    if (nums[0] <= k)
        dp[nums[0]] = true;

    for (int index = 1; index < n; index++) {
        curr = dp; // Copy dp to curr
        for (int target = 1; target <= k; target++) {
            bool not_taken = dp[target];
            bool taken = false;
            if (target >= nums[index])
                taken = dp[target - nums[index]];

            curr[target] = taken | not_taken;
        }
        dp = curr;
    }

    int mini = 1e9;
    for (int s1 = 0; s1 <= k / 2; s1++) {
        if (dp[s1]) {
            mini = min(mini, abs(k - 2 * s1)); // Corrected difference calculation
        }
    }
    return mini;
}
