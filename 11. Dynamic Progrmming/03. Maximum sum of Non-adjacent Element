You are given an array/list of ‘N’ integers. You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.

// -------------------- recursion TC-(2^n) ----------------------
int helper(int index, vector<int> &nums) {
    if(index == 0)  return nums[index];
    if(index < 0)   return 0;

    int pick = nums[index] + helper(index - 2, nums);
    int notPick = helper(index - 1, nums);

    return max(pick, notPick);
}


// -------------------- memoization TC-(n) ----------------------
int helper(int index, vector<int> &nums, vector<int> &dp) {
    if(index == 0)  return nums[index];
    if(index < 0)   return 0;

    if(dp[index] != -1) return dp[index];

    int pick = nums[index] + helper(index - 2, nums, dp);
    int notPick = helper(index - 1, nums, dp);

    return dp[index] = max(pick, notPick);
}

// ------------------ tabulation ----------------------------
int maximumNonAdjacentSum(vector<int> &nums) {
    // Write your code here.
    int n = nums.size();

    vector<int> dp(n, 0);
    if(n == 0) return 0;
    if(n == 1) return dp[0];

    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        int pick = nums[i] + dp[i-2];
        int notPick = dp[i-1];
        dp[i] = max(pick, notPick);
    }

    return dp[n-1];
}

// ------------------ space opt -----------------------
int maximumNonAdjacentSum(vector<int> &nums) {
    int n = nums.size();

    if (n == 0) return 0;
    if (n == 1) return nums[0];

    int prev2 = 0, prev1 = nums[0];
    
    for (int i = 1; i < n; i++) {
        int pick = nums[i] + prev2;
        int notPick = prev1;
        int curr = max(pick, notPick);
        prev2 = prev1;
        prev1 = curr;
    }

    return prev1;
}


int maximumNonAdjacentSum(vector<int> &nums) {
    // Write your code here.
    int n = nums.size();
    return helper(n-1, nums);
}
