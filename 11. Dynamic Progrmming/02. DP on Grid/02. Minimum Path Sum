Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.



class Solution {
public:
    int helper(int i, int j, vector<vector<int>>& grid,
               vector<vector<int>>& dp) {
        if (i == 0 && j == 0)
            return grid[i][j];
        if (i < 0 || j < 0)
            return 1e9;

        if (dp[i][j] != -1)
            return dp[i][j];
        int up = grid[i][j] + helper(i - 1, j, grid, dp);
        int left = grid[i][j] + helper(i, j - 1, grid, dp);

        return dp[i][j] = min(up, left);
    }
    int minPathSum(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();

        // memoization
        // vector<vector<int>> dp(n, vector<int>(m, -1));
        // return helper(n-1, m-1, grid, dp);

        // tabulation
        // vector<vector<int>> dp(n, vector<int>(m, -1));
        // for (int i = 0; i < n; i++) {
        //     for (int j = 0; j < m; j++) {
        //         if (i == 0 && j == 0)
        //             dp[i][j] = grid[i][j];
        //         else {
        //             int up = 1e9, left = 1e9;
        //             if(i > 0) up = grid[i][j] + dp[i-1][j];
        //             if(j > 0) left = grid[i][j] + dp[i][j-1];
        //             dp[i][j] = min(up, left);
        //         }
        //     }
        // }
        // return dp[n-1][m-1];

        // space optimization
        vector<int> dp(m, -1);
        for (int i = 0; i < n; i++) {
            vector<int> curr(m, -1);
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    curr[j] = grid[i][j];
                else {
                    int up = 1e9, left = 1e9;
                    if (i > 0)
                        up = grid[i][j] + dp[j];
                    if (j > 0)
                        left = grid[i][j] + curr[j - 1];
                    curr[j] = min(up, left);
                }
            }
            dp = curr;
        }
        return dp[m-1];
    }
};
