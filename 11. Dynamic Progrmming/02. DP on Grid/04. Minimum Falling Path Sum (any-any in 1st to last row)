Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).



class Solution {
public:
    int helper(int i, int j, vector<vector<int>>& matrix, int n,
               vector<vector<int>>& dp) {
        if (j < 0 || j >= n)
            return 1e9;
        if (i == 0)
            return matrix[i][j];

        if (dp[i][j] != -1)
            return dp[i][j];

        int up = matrix[i][j] + helper(i - 1, j, matrix, n, dp);
        int ld = matrix[i][j] + helper(i - 1, j - 1, matrix, n, dp);
        int rd = matrix[i][j] + helper(i - 1, j + 1, matrix, n, dp);

        return dp[i][j] = min(min(up, ld), rd);
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {

        int n = matrix.size();
        int mini = 1e9;

        // memoization
        // vector<vector<int>> dp(n, vector<int>(n, -1));
        // for (int j = 0; j < n; j++) {
        //     int temp = helper(n - 1, j, matrix, n, dp);
        //     mini = min(mini, temp);
        // }
        // return mini;

        // tabulation
        // vector<vector<int>> dp(n, vector<int>(n, -1));
        // for (int j = 0; j < n; j++) {
        //     dp[0][j] = matrix[0][j];
        // }

        // for (int i = 1; i < n; i++) {
        //     for (int j = 0; j < n; j++) {
        //         int up = matrix[i][j] + dp[i - 1][j];
        //         int ld = 1e9, rd = 1e9;
        //         if (j - 1 >= 0)
        //             ld = matrix[i][j] + dp[i - 1][j - 1];
        //         if (j + 1 < n)
        //             rd = matrix[i][j] + dp[i - 1][j + 1];

        //         dp[i][j] = min(min(up, ld), rd);
        //     }
        // }

        // for (int j = 0; j < n; j++) {
        //     int temp = dp[n - 1][j];
        //     mini = min(mini, temp);
        // }
        // return mini;


        // space optimization
        vector<int> dp(n, -1), curr(n, 0);
        for (int j = 0; j < n; j++) {
            dp[j] = matrix[0][j];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int up = matrix[i][j] + dp[j];
                int ld = 1e9, rd = 1e9;
                if (j - 1 >= 0)
                    ld = matrix[i][j] + dp[j - 1];
                if (j + 1 < n)
                    rd = matrix[i][j] + dp[j + 1];

                curr[j] = min(min(up, ld), rd);
            }
            dp = curr;
        }

        for (int j = 0; j < n; j++) {
            int temp = dp[j];
            mini = min(mini, temp);
        }
        return mini;
    }
};
