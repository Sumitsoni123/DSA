Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.


class Solution {
public:
    int helper(int i, int j, vector<vector<int>>& triangle, int n,
               vector<vector<int>>& dp) {
        if (i == n - 1)
            return triangle[i][j];

        if (dp[i][j] != -1)
            return dp[i][j];
        int down = triangle[i][j] + helper(i + 1, j, triangle, n, dp);
        int diagonal = triangle[i][j] + helper(i + 1, j + 1, triangle, n, dp);

        return dp[i][j] = min(down, diagonal);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();

        // memoization
        // vector<vector<int>> dp(n, vector<int>(n, -1));
        // return helper(0, 0, triangle, n, dp);

        // tabulation
        // vector<vector<int>> dp(n, vector<int>(n, -1));
        // for (int i = n - 1; i >= 0; i--) {
        //     for (int j = i; j >= 0; j--) {
        //         if (i == n - 1) {
        //             dp[i][j] = triangle[i][j];
        //         } else {
        //             int down = triangle[i][j] + dp[i + 1][j];
        //             int diagonal = triangle[i][j] + dp[i + 1][j + 1];

        //             dp[i][j] = min(down, diagonal);
        //         }
        //     }
        // }
        // return dp[0][0];

        // space optimization
        vector<int> dp(n, 0), curr(n, 0);
        for (int j = 0; j < n; j++) {
            dp[j] = triangle[n - 1][j];
        }

        for (int i = n - 2; i >= 0; i--) {
            for (int j = i; j >= 0; j--) {

                int down = triangle[i][j] + dp[j];
                int diagonal = triangle[i][j] + dp[j + 1];

                curr[j] = min(down, diagonal);
            }
            dp = curr;
        }
        return dp[0];
    }
};
