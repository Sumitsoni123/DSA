Design a max stack that supports push, pop, top, peekMax and popMax.

push(x) -- Push element x onto stack.
pop() -- Remove the element on top of the stack and return it.
top() -- Get the element on the top.
peekMax() -- Retrieve the maximum element in the stack.
popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.



class MaxStack {
public:
    struct Node {
        int val;
        Node* prev;
        Node* next;
        Node(int val) : val(val), prev(nullptr), next(nullptr) {}
        Node(int val, Node* prev, Node* next) : val(val), prev(prev), next(next) {}
    };

    map<int, vector<Node*>> map;
    Node* head;
    Node* tail;

    MaxStack() {
        head = new Node(-1);
        tail = new Node(-1);
        head->next = tail;
        tail->prev = head;
    }

    void push(int x) {
        // Insert At Last in DLL
        Node* curr = new Node(x, tail->prev, tail);
        tail->prev->next = curr;
        tail->prev = curr;

        // Insert in TreeMap
        if (map.find(x) == map.end()) {
            map[x] = vector<Node*>();
        }
        map[x].push_back(curr);
    }

    int pop() {
        // Delete Last Element From DLL
        Node* curr = tail->prev;
        curr->prev->next = curr->next;
        curr->next->prev = curr->prev;

        // Delete Node From TreeMap
        vector<Node*>& arr = map[curr->val];
        arr.pop_back();
        if (arr.empty()) {
            map.erase(curr->val);
        }
        return curr->val;
    }

    int top() {
        return tail->prev->val;
    }

    int peekMax() {
        return map.rbegin()->first;
    }

    int popMax() {
        int maxVal = peekMax();
        vector<Node*>& arr = map[maxVal];
        Node* curr = arr.back();

        // Delete Last Element From DLL
        curr->prev->next = curr->next;
        curr->next->prev = curr->prev;

        // Delete Node From TreeMap
        arr.pop_back();
        if (arr.empty()) {
            map.erase(curr->val);
        }
        return curr->val;
    }
};
