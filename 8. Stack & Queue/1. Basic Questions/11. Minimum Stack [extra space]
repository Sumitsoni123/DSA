1. You are required to complete the code of our MinStack class. 
2. As data members you've two stacks available in the class - one for data values and another for minimum values. (This is cryptic - take hint from video)
2. Here is the list of functions that you are supposed to complete
2.1. push -> Should accept new data in LIFO manner
2.2. pop -> Should remove and return data in LIFO manner. If not available, print "Stack underflow" and return -1.
2.3. top -> Should return data in LIFO manner. If not available, print "Stack underflow" and return -1.
2.4. size -> Should return the number of elements available in the stack
2.5. min -> Should return the smallest element available in the stack. If not available, print "Stack underflow" and return -1.
3. Input and Output is managed for you.


#include<bits/stdc++.h>
using namespace std;

class MinStack {
    stack<int> allData;
    stack<int> minData;
    
    public:
        int size() {
            // write your code here
            return allData.size();
        }
    
    public:
        void push(int val) {
            // write your code here
            allData.push(val);
            if(minData.size() == 0 || val <= minData.top())
                minData.push(val);
        }
    
    public:
        int pop() {
            // write your code here
            if(allData.size() == 0) {
                cout<<"Stack underflow"<<endl;
                return -1;
            }
            
            int val = allData.top();
            allData.pop();
            if(val == minData.top())
                minData.pop();
            
            return val;    
        }
    
    public:
        int top() {
            // write your code here
            if(allData.size() == 0) {
                cout<<"Stack underflow"<<endl;
                return -1;
            }
            
            return allData.top();
        }
    
    public:
        int min() {
            // write your code here
             if(allData.size() == 0) {
                cout<<"Stack underflow"<<endl;
                return -1;
            }
            
            return minData.top();
        }

};


int main() {
    MinStack st;

    string str;
    cin >> str;

    while (str != "quit") {

        if (str == "push") {
            int val;
            cin >> val;
            st.push(val);
        }
        else if (str == "pop") {
            int val = st.pop();
            if (val != -1) {
                cout << val << endl;
            }
        }
        else if (str == "top") {
            int val = st.top();
            if (val != -1) {
                cout << val << endl;
            }
        }
        else if (str == "size") {
            cout << st.size() << endl;
        }
        else if (str == "min" ) {
            int val = st.min();
            if (val != -1) {
                cout << val << endl;
            }
        }
        cin >> str;
    }
}
