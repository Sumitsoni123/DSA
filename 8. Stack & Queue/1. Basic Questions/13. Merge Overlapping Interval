1. You are given a number n, representing the number of time-intervals.
2. In the next n lines, you are given a pair of space separated numbers.
3. The pair of numbers represent the start time and end time of a meeting (first number is start time and second number is end time)
4. You are required to merge the meetings and print the merged meetings output in increasing order of start time.

E.g. Let us say there are 6 meetings
1 8
5 12
14 19
22 28
25 27
27 30

Then the output of merged meetings will belongs
1 12
14 19
22 30



#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>

using namespace std;

bool compare(const vector<int>& a, const vector<int>& b) {
    return (a[0] < b[0]);
}

void mergeOverlappingIntervals(vector<vector<int>>& arr) {
    // merge overlapping intervals and print in increasing order of start time
    sort(arr.begin(), arr.end(), compare);

    stack<vector<int>> stk;

    for (int i = 0; i < arr.size(); i++) {
        int start = arr[i][0];
        int end = arr[i][1];

        if (stk.empty()) {
            stk.push({start, end});
        } else {
            vector<int> prevInt = stk.top();
            stk.pop();
            if (start <= prevInt[1]) {
                prevInt[1] = max(end, prevInt[1]);
                stk.push(prevInt);
            } else {
                stk.push(prevInt);
                stk.push({start, end});
            }
        }
    }

    stack<vector<int>> temp;
    while (!stk.empty()) {
        temp.push(stk.top());
        stk.pop();
    }

    while (!temp.empty()) {
        vector<int> ans = temp.top();
        temp.pop();
        cout << ans[0] << " " << ans[1] << endl;
    }
}

int main() {
    int n;
    cin >> n;

    vector<vector<int>> arr(n, vector<int>(2));

    for (int j = 0; j < n; j++) {
        cin >> arr[j][0] >> arr[j][1];
    }

    mergeOverlappingIntervals(arr);

    return 0;
}
