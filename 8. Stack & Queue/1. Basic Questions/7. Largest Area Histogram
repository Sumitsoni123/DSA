1. You are given a number n, representing the size of array a.
2. You are given n numbers, representing the height of bars in a bar chart.
3. You are required to find and print the area of largest rectangle in the histogram.

e.g.
for the array [6 2 5 4 5 1 6] -> 12



#include <bits/stdc++.h>
using namespace std;

vector<int> leftSolve(vector<int>& arr) {
    // solve
    stack<int> stk;
    int n = arr.size();
    vector<int> nge(n);

    for (int i = 0;i < n; i++) {
        int curr = arr[i];
        // pop smaller elements
        while (!stk.empty() && stk.top() > curr) {
            stk.pop();
        }

        // return ans -> stack Top
        if (stk.empty()) {
            nge[i] = -1;
        } else {
            nge[i] = stk.top();
        }

        // push curr element
        stk.push(i);
    }
    return nge;
}

vector<int> rightSolve(vector<int>& arr) {
    // solve
    stack<int> stk;
    int n = arr.size();
    vector<int> nge(n);

    for (int i = n - 1; i >= 0; i--) {
        int curr = arr[i];
        // pop smaller elements
        while (!stk.empty() && stk.top() > curr) {
            stk.pop();
        }

        // return ans -> stack Top
        if (stk.empty()) {
            nge[i] = arr.length();
        } else {
            nge[i] = stk.top();
        }

        // push curr element
        stk.push(i);
    }
    return nge;
}

int main()
{
    int n;
    cin >> n;
    vector<int>arr(n, 0);
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    
    //write your code here
    vector<int> left = leftSolve(arr);
    vector<int> right = rightSolve(arr);
    int maxArea = 0;
    
    for(int i=0; i<n; i++) {
       
       int length = right[i] - left[i] -1;
       int height = arr[i];
       int currArea = length*height;
       
       maxArea = max(maxArea, currArea);
    }
    
    cout<<maxArea<<endl;
    
    return 0;
}
