#include <iostream>
#include <stack>

class StackToQueueAdapter {
    std::stack<int> mainS;

public:
    StackToQueueAdapter() {
        // Constructor
    }

    int size() {
        return mainS.size();
    }

    void add(int val) {
        mainS.push(val);
    }

    int remove() {
        if (mainS.empty()) {
            std::cout << "Queue underflow" << std::endl;
            return -1;
        }

        std::stack<int> helperS;

        int count = mainS.size() - 1;
        for (int i = 1; i <= count; i++) {
            helperS.push(mainS.top());
            mainS.pop();
        }

        int val = mainS.top();
        mainS.pop();

        while (!helperS.empty()) {
            mainS.push(helperS.top());
            helperS.pop();
        }

        return val;
    }

    int peek() {
        if (mainS.empty()) {
            std::cout << "Queue underflow" << std::endl;
            return -1;
        }

        std::stack<int> helperS;

        int count = mainS.size() - 1;
        for (int i = 1; i <= count; i++) {
            helperS.push(mainS.top());
            mainS.pop();
        }

        int val = mainS.top();

        while (!helperS.empty()) {
            mainS.push(helperS.top());
            helperS.pop();
        }

        return val;
    }
};

int main() {
    // Example usage
    StackToQueueAdapter queue;
    queue.add(1);
    queue.add(2);
    queue.add(3);

    std::cout << "Peek element: " << queue.peek() << std::endl;
    std::cout << "Removed element: " << queue.remove() << std::endl;
    std::cout << "Size of queue: " << queue.size() << std::endl;

    return 0;
}
