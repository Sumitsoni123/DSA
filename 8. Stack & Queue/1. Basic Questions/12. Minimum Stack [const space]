1. You are required to complete the code of our MinStack class. 
2. As data members you've one stack and a min element available in the class. (This is cryptic - take hint from video)
3. Here is the list of functions that you are supposed to complete
      3.1. push -> Should accept new data in LIFO manner.
      3.2. pop -> Should remove and return data in LIFO manner. If not available, print 
       "Stack underflow" and return -1.
      3.3. top -> Should return data in LIFO manner. If not available, print "Stack 
      underflow" and return -1.
     3.4. size -> Should return the number of elements available in the stack.
     3.5. min -> Should return the smallest element available in the stack. If not 
     available, print "Stack underflow" and return -1.
4. Input and Output is managed for you.



#include <iostream>
#include <stack>
using namespace std;

class MinStack {
    stack<int> stk;
    int minVal;

public:
    int size() {
        return stk.size();
    }

    void push(int val) {
        if (stk.empty()) {
            stk.push(val);
            minVal = val;
        } else {
            if (val >= minVal) {
                stk.push(val);
            } else {
                stk.push(2 * val - minVal);
                minVal = val;
            }
        }
    }

    int pop() {
        if (stk.empty()) {
            cout << "Stack underflow" << endl;
            return -1;
        }

        int topVal = stk.top();
        stk.pop();

        if (topVal < minVal) {
            int oldMin = minVal;
            minVal = 2 * minVal - topVal;
            return oldMin;
        } else {
            return topVal;
        }
    }

    int top() {
        if (stk.empty()) {
            cout << "Stack underflow" << endl;
            return -1;
        }

        int topVal = stk.top();
        if (topVal < minVal) {
            return minVal;
        } else {
            return topVal;
        }
    }

    int getMin() {
        if (stk.empty()) {
            cout << "Stack underflow" << endl;
            return -1;
        }

        return minVal;
    }
};

int main() {
    MinStack st;

    string str;
    cin >> str;

    while (str != "quit") {
        if (str == "push") {
            int val;
            cin >> val;
            st.push(val);
        } else if (str == "pop") {
            int val = st.pop();
            if (val != -1) {
                cout << val << endl;
            }
        } else if (str == "top") {
            int val = st.top();
            if (val != -1) {
                cout << val << endl;
            }
        } else if (str == "size") {
            cout << st.size() << endl;
        } else if (str == "min") {
            int val = st.getMin();
            if (val != -1) {
                cout << val << endl;
            }
        }

        cin >> str;
    }

    return 0;
}
