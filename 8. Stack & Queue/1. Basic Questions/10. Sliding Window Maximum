1. You are given a number n, representing the size of array a.
2. You are given n numbers, representing the elements of array a.
3. You are given a number k, representing the size of window.
4. You are required to find and print the maximum element in every window of size k.

e.g.
for the array [2 9 3 8 1 7 12 6 14 4 32 0 7 19 8 12 6] and k = 4, the answer is [9 9 8 12 12 14 14 32 32 32 32 19 19 19]



#include <bits/stdc++.h>
using namespace std;


vector<int> solve(vector<int>& arr) {
    // solve
    stack<int> stk;
    int n = arr.size();
    vector<int> nge(n);

    for (int i = n - 1; i >= 0; i--) {
        int curr = arr[i];
        // pop smaller elements
        while (!stk.empty() && arr[stk.top()] < curr) {
            stk.pop();
        }

        // return ans -> stack Top
        if (stk.empty()) {
            nge[i] = n;
        } else {
            nge[i] = stk.top();
        }

        // push curr element
        stk.push(i);
    }
    return nge;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) 
        cin >> arr[i];
    
    int k;
    cin >> k;
    vector<int>nge = solve(arr);
    int prevWindowMax = 0;
    for(int st = 0; st<= n-k; st++) {
        
        int curr = st;
        if(prevWindowMax >= st && prevWindowMax < st+k)
            curr = prevWindowMax;
        
        while(nge[curr] < st+k)
            curr = nge[curr];
        
        cout<<arr[curr]<<endl;    
    }
    
    return 0;
}
