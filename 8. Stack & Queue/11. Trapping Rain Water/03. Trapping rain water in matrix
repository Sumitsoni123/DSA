Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.


class Solution {
public:
    class Pair {
    public:
        int row;
        int col;
        int val;

        Pair(int row, int col, int val) : row(row), col(col), val(val) {}

        // overload < operator
        bool operator<(const Pair& other) const {
            // for min heap , this should return true is curr is greater
            return (this->val > other.val);
        }
    };

    int rows[4] = {-1, 1, 0, 0};
    int cols[4] = {0, 0, 1, -1};

    int trapRainWater(vector<vector<int>>& mat) {
        priority_queue<Pair> q;

        int row = mat.size(), col = mat[0].size();

        for (int i = 0; i < row; i++) {
            if (mat[i][0] != -1) {
                q.push(Pair(i, 0, mat[i][0]));
                mat[i][0] = -1;
            }

            if (mat[i][col - 1] != -1) {
                q.push(Pair(i, col - 1, mat[i][col - 1]));
                mat[i][col - 1] = -1;
            }
        }

        for (int j = 0; j < col; j++) {
            if (mat[0][j] != -1) {
                q.push(Pair(0, j, mat[0][j]));
                mat[0][j] = -1;
            }

            if (mat[row - 1][j] != -1) {
                q.push(Pair(row - 1, j, mat[row - 1][j]));
                mat[row - 1][j] = -1;
            }
        }

        int water = 0;
        while (!q.empty()) {
            Pair min = q.top();
            q.pop();

            for (int i = 0; i < 4; i++) {
                int r = min.row + rows[i];
                int c = min.col + cols[i];

                if (r >= 0 && r < row && c >= 0 && c < col && mat[r][c] != -1) {
                    int newVal = mat[r][c];

                    if (newVal < min.val) {
                        water += (min.val - newVal);
                        q.push(Pair(r, c, min.val));
                    } else {
                        q.push(Pair(r, c, newVal));
                    }
                    mat[r][c] = -1;
                }
            }
        }
        return water;
    }
};
