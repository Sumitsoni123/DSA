Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5


class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        deque<int> dq;
        int x = nums.size() - k;
        
        for (int i = 0; i < nums.size(); i++) {
            int currVal = nums[i];
            while (!dq.empty() && x > 0 && dq.back() > currVal) {
                dq.pop_back();
                x--;
            }

            dq.push_back(currVal);
        }

        while (!dq.empty() && x > 0) {
            dq.pop_back();
            x--;
        }

        if (dq.empty()) return {};

        vector<int> ans;
        while (!dq.empty()) {
            ans.push_back(dq.front());
            dq.pop_front();
        }

        return ans;
    }
};
