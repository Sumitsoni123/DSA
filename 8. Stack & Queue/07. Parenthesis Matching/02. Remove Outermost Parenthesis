A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.


class Solution {
public:
    string removeOuterParentheses(string s) {
        // Using extra stack space

        // stack<int> stk;
        // string result = "";
        // for (int i = 0; i < s.length(); i++) {
        //     char ch = s[i];

        //     if (ch == '(')
        //         stk.push(i);
        //     else {
        //         int j = stk.top();
        //         stk.pop();
        //         if (stk.empty())
        //             result += s.substr(j + 1, i - j - 1);
        //     }
        // }

        // return result;

        int opening = 0;
        string result = "";

        for (int i = 0; i < s.length(); i++) {
            char ch = s[i];
            if (ch == '(') {
                if (opening > 0)
                    result += ch;
                opening++;
            } else {
                opening--;
                if (opening > 0)
                    result += ch;
            }
        }
        return result;
    }
};
