Implement the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.


class MyCircularQueue {
private:
    int front = 0, rear = 0, size = 0;
    vector<int> arr;
public:
    MyCircularQueue(int k) {
        arr.resize(k);
    }
    
    bool enQueue(int value) {
        if (size == arr.size())
            return false;
        
        arr[rear] = value;
        rear = (rear + 1) % arr.size();
        size++;
        return true;
    }
    
    bool deQueue() {
        if (size == 0)
            return false;
        
        int x = arr[front];
        front = (front + 1) % arr.size();
        size--;
        return true;
    }
    
    int Front() {
        if (size == 0)
            return -1;
        
        return arr[front];
    }
    
    int Rear() {
        if (size == 0)
            return -1;
        
        return arr[(rear - 1 + arr.size()) % arr.size()];
    }
    
    bool isEmpty() {
        return size == 0;
    }
    
    bool isFull() {
        return size == arr.size();
    }
};
