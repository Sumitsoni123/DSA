Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.


class Solution {
    unordered_set<string> ans;

public:
    void helper(string input, string output, int open, int close, int unbalanced) {
        if (input.length() == 0) {
            if (open == 0 && close == 0 && unbalanced == 0)
                ans.insert(output);
            return;
        }

        char ch = input[0];
        string remS = input.substr(1);

        if (ch == '(') {
            if (open > 0)
                helper(remS, output, open - 1, close, unbalanced);

            helper(remS, output + ch, open, close, unbalanced + 1);
        } else if (ch == ')') {
            if (close > 0)
                helper(remS, output, open, close - 1, unbalanced);

            if (unbalanced > 0)
                helper(remS, output + ch, open, close, unbalanced - 1);
        } else
            helper(remS, output + ch, open, close, unbalanced);
    }

    vector<string> removeInvalidParentheses(string s) {
        ans.clear();

        int open = 0, close = 0;
        for (char ch : s) {
            if (ch == '(')
                open++;
            else if (ch == ')') {
                if (open > 0)
                    open--;
                else
                    close++;
            }
        }

        helper(s, "", open, close, 0);
        vector<string> res(ans.begin(), ans.end());
        return res;
    }
};
