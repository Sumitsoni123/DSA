There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.


//------------------------------ TC= O{N} + O(V + 2E)  SC= O(N) + O(N) -------------------------------------------------

class Solution {
    void dfs(int node, vector<int> adj[], vector<bool> &vis) {
        vis[node] = true;
        for(auto it: adj[node]) {
            if(!vis[it]) 
                dfs(it, adj, vis);
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adj[n];

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(isConnected[i][j] == 1 && i!=j) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int cnt = 0;
        vector<bool> vis(n, false);
        for(int i=0; i<n; i++) {
            if(!vis[i]) {
                dfs(i ,adj, vis);
                cnt++;
            }
        }
        return cnt;
    }
};
