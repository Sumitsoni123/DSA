Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M, where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i.

Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex, then return -1 for that vertex.


class Solution {
  private:
    void topoDFS(int node, int vis[], vector<pair<int, int>> adj[], stack<int> &stk) {
        
        vis[node] = 1;
        for(auto it: adj[node]) {
            
            int v = it.first;
            if(!vis[v]) {
                topoDFS(v, vis, adj, stk);
            }
        }
        stk.push(node);
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int, int>> adj[N];
        for(int i=0; i<M; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            adj[u].push_back({v, wt});
        }
        
        int vis[N] = {0};
        stack<int> stk;
        for(int i=0; i<N; i++) {
            if(!vis[i]) {
                topoDFS(i, vis, adj, stk);
            }
        }
        
        vector<int> dist(N, INT_MAX);
        
        dist[0] = 0;    // given it as src node
        while(!stk.empty()) {
            int node = stk.top();
            stk.pop();
            
            for(auto it: adj[node]) {
                int v = it.first;
                int wt = it.second;
                
                if(dist[node] == INT_MAX)   
                    continue;
                
                if(dist[node] + wt < dist[v]) {
                    dist[v] = dist[node] + wt;
                }
            }
        }
        for(int i = 0; i < N; i++) {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }        
        return dist;
    }
};
