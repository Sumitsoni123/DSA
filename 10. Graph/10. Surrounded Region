Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.


//---------------------------------------------- TC- O(n*m)*4    SC- O(n*m) ---------------------------------------------
class Solution {
    void dfs(int row, int col, vector<vector<char>> &board, vector<vector<bool>> &vis) {
        int n = board.size();
        int m = board[0].size();

        vis[row][col] = true;
        int dx[4] = {1, 0, -1, 0};
        int dy[4] = {0, -1, 0, 1};

        for(int i=0; i<4; i++) {
            int nrow = row + dx[i];
            int ncol = col + dy[i];

            if(nrow >=0 && nrow <n && ncol >=0 && ncol <m && board[nrow][ncol] == 'O' && vis[nrow][ncol] == false) 
                dfs(nrow, ncol, board, vis);
        }
    }
public:
    void solve(vector<vector<char>> &board) {
        int n = board.size();
        int m = board[0].size();

        vector<vector<bool>> vis(n, vector<bool>(m, 0));

        // traversing first & last row
        for(int c=0; c<m; c++) {
            if(!vis[0][c] && board[0][c] == 'O')
                dfs(0, c, board, vis);

            if(!vis[n-1][c] && board[n-1][c] == 'O')
                dfs(n-1, c, board, vis);    
        }

        // traversing first & last col
        for(int r=0; r<n; r++) {
            if(!vis[r][0] && board[r][0] == 'O')
                dfs(r, 0, board, vis);

            if(!vis[r][m-1] && board[r][m-1] == 'O')
                dfs(r, m-1, board, vis);    
        }

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(!vis[i][j] && board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
};
