Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.


class Solution
{
	public:
    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S) {
        // min Head declared
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        vector<int> dist(V, INT_MAX);
        
        dist[S] = 0;
        pq.push({0, S});
        
        while(!pq.empty()) {
            int node = pq.top().second;
            int dis = pq.top().first;
            
            pq.pop();
            
            for(auto it: adj[node]) {
                
                int adjNode = it[0];
                int edgeWt = it[1];
                
                if(dis + edgeWt < dist[adjNode]) {
                    dist[adjNode] = dis + edgeWt;
                    pq.push({dist[adjNode], adjNode});
                }
            }
        }
        return dist;
    }
};
