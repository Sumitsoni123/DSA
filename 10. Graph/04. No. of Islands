Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


class Solution {
    bool isValid(int row, int col, vector<vector<char>> &grid, vector<vector<int>> &vis) {
        int n = grid.size();
        int m = grid[0].size();
        if(row >= 0 && row < n && col >= 0 && col < m && grid[row][col] == '1' && vis[row][col] == 0)
            return true;
        return false;    
    }

    void bfs(int row, int col, vector<vector<char>> &grid, vector<vector<int>> &vis) {
        queue<pair<int, int>> q;
        q.push({row, col});
        vis[row][col] = 1;
        while(!q.empty()) {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            // going to 4 neighbours
            int rArr[4] = {1, 0, -1, 0};
            int cArr[4] = {0, 1, 0, -1};
            for(int del=0; del<4; del++) {

                int nrow = r + rArr[del];
                int ncol = c + cArr[del];
                if(isValid(nrow, ncol, grid, vis)) {
                    q.push({nrow, ncol});
                    vis[nrow][ncol] = 1;
                }
            }
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int cnt = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(!vis[i][j] && grid[i][j] == '1') {
                    cnt++;
                    bfs(i, j, grid, vis);
                }
            }
        }
        return cnt;
    }
};
