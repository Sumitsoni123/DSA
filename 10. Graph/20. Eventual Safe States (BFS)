There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.


class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int V = graph.size();
        vector<int> adjRev[V];
        vector<int> indegree(V, 0);
        vector<int> ans;
        // creating adjRev matrix
        for(int i=0; i<graph.size(); i++) {
            for(int j=0; j<graph[i].size(); j++) {
                adjRev[graph[i][j]].push_back(i);
                indegree[i]++;
            }
        }        

        queue<int> q;
        for(int i=0; i<V; i++) {
            if(indegree[i] == 0) {
                q.push(i);
            }
        }

        while(!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);
            for(auto it: adjRev[node]) {
                indegree[it]--;
                if(indegree[it] == 0) 
                    q.push(it);
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};
