Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.


class Solution {
    void dfs(int node, vector<int> adj[], int vis[], stack<int> &stk) {
        
        vis[node] = 1;
        for(auto it: adj[node]) {
            if(!vis[it]) {
                dfs(it, adj, vis, stk);
            }
        }
        stk.push(node);
    }
public: 
	vector<int> topoSort(int V, vector<int> adj[]) {
	    
	    stack<int> stk;
	    int vis[V] = {0};
	    
	    for(int i=0; i<V; i++) {
	        
	        if(!vis[i]) {
	            dfs(i, adj, vis, stk);
	        }
	    }
	    
	    vector<int> ans;
	    while(!stk.empty()) {
	        ans.push_back(stk.top());
	        stk.pop();
	    }
	    
	    return ans;
	}
};
