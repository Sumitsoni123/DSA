n English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root "an" is followed by the successor word "other", we can form a new word "another".

Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the sentence after the replacement.



class TrieNode {
public:
    TrieNode* children[26];
    bool isEnd;

    TrieNode() {
        for(auto &ch: children) 
            ch = NULL;
       isEnd = false;     
    }
};
class Solution {
    TrieNode* root;
public:

    void insert(string &word) {

        TrieNode* curr = root;
        for(auto &ch: word) {
            int index = ch - 'a';

            if(curr->children[index] == NULL) 
                curr->children[index] = new TrieNode();

            curr = curr->children[index];
        }
        curr->isEnd = true;
    }

    string search(TrieNode* node, string &word) {

        for(int i=0; i<word.length(); i++) {
            int idx = word[i] - 'a';

            if(node->children[idx] == NULL)
                return word;

            if(node->children[idx]->isEnd == true)
                return word.substr(0, i+1);    

            node = node->children[idx];    
        }

        return word;
    }

    string replaceWords(vector<string>& dictionary, string sentence) {
        root = new TrieNode();

        for(auto &word: dictionary) 
            insert(word);

        stringstream ss(sentence);  
        string word;
        string ans = "";
        while (ss >> word) {            // Extract word from the stream.
            if(ans.length() >0) 
                ans.append(" "); 

            ans.append(search(root, word));
        }

        return ans;
    }
};
