Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.


// TC- (nlogn + n)
class Solution {
public:
    
    static bool compare(vector<int> &a, vector<int> &b)
    {
        return (a[0] < b[0]);
    }
    
    vector<vector<int>> merge(vector<vector<int>>& intervals)
    {
       
        sort(intervals.begin(), intervals.end(), compare);
        
        vector<vector<int>> ans;
        int l = intervals[0][0], r = intervals[0][1];
        
        for(int i=1; i<intervals.size(); i++)
        {
            if(intervals[i][0] <= r)
            {
                r = max(r, intervals[i][1]);
            }
            else
            {
                vector<int> temp;
                temp.push_back(l);
                temp.push_back(r);
                ans.push_back(temp);
                l = intervals[i][0];
                r = intervals[i][1];
            }
        }
        
        vector<int> temp;
        temp.push_back(l);
        temp.push_back(r);
        ans.push_back(temp);
        return ans;
    }
};
