You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].




class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        
        
        int idx1 = 0, idx2 = 0;
        vector<vector<int>> res;
        
        while(idx1 < firstList.size() && idx2 < secondList.size())
        {
            int s1 = firstList[idx1][0];
            int e1 = firstList[idx1][1];
            
            int s2 = secondList[idx2][0];
            int e2 = secondList[idx2][1];
            
            int start  = max(s1, s2);
            int end = min(e1, e2);
            
            if(start <= end)
            {
                vector<int> temp;
                temp.push_back(start);
                temp.push_back(end);
                res.push_back(temp);
            }
            
            if(e1 < e2)
                idx1++;
            else
                idx2++;
        }
        
        return res;
    }
};
