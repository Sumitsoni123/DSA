
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.)


// TC - (nlogn + n)   SC - (n)
/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    // TC- (nlogn + n) SC- (n)
    static bool compare(Interval a, Interval b)
    {
        return (a.start < b.start);
    }

    int minMeetingRooms(vector<Interval> &intervals) {
        // Write your code here
        sort(intervals.begin(), intervals.end(), compare);
        priority_queue<int, vector<int>, greater<int>> q;
        int cnt = 0;
        for(int i=0; i<intervals.size(); i++)
        {
            if(q.size() == 0 || intervals[i].start < q.top())
                cnt++;
            else
                q.pop();    

            q.push(intervals[i].end);
        }

        return cnt;
    }
};



// TC - (nlogn) SC - (k)
class Solution {
public:
    /**
     * @param intervals: an array of meeting time intervals
     * @return: the minimum number of conference rooms required
     */
    int minMeetingRooms(vector<Interval> &intervals) {
        // Write your code here
        vector<int> start, end;

        for(auto it: intervals)
        {
            start.push_back(it.start);
            end.push_back(it.end);
        }

        sort(start.begin(), start.end());
        sort(end.begin(), end.end());

        int cntRooms = 0, maxRooms = 0, i=0, j=0;

        while(i < start.size())
        {
            if(start[i] < end[j])
            {
                cntRooms++;
                i++;
            }
            else if(start[i] >end[j]) {
                cntRooms--;
                j++;
            }
            else {
                i++; j++;
            }

            maxRooms = max(maxRooms, cntRooms);
        }

        return maxRooms;
    }
};
