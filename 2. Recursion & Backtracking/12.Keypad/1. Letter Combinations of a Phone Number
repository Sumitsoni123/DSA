Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.




class Solution {
public:
    string keys[10] = { "","", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
    
    void helper(string digits, int idx, string output, vector<string>& ans) {
        
        if(idx == digits.length()) {
            ans.push_back(output);
            return;
        }
        
        int num = digits[idx] - '0';
        string value = keys[num];
        
        for(int i=0; i<value.length(); i++)
        {
            output.push_back(value[i]);
            helper(digits, idx+1, output, ans);
            output.pop_back();
        }
        
    }
    
    vector<string> letterCombinations(string digits) {
        
        vector<string> ans;
        if(digits.length() == 0)
            return ans;
        
        helper(digits, 0, "", ans);
        return ans;
    }
};
