Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.



class Solution {
public:
    
    bool isSafe(vector<vector<char>>& board, int row, int col, int val) {
        
        for(int i=0; i<board.size(); i++) {
            
            if(board[row][i] == val+'0')
                return false;
            
            if(board[i][col] == val+'0')
                return false;
            
            if(board[3*(row/3) + i/3][3*(col/3) +i%3] == val+'0')
                return false;
        }
        
        return true;
    }
    
    
    //-------------------------------------------------------- Recursive Solutions ----------------------------------------------------------
    bool solver(vector<vector<char>>& board, int row, int col) {
        
        if(row == 9)    return true;

        int nextRow = (col == 8)? row+1: row;
        int nextCol = (col == 8)? 0: col+1;

        if(board[row][col] != '.') {
            bool res = solver(board, nextRow, nextCol);
            if(res == true)
                return true;
        }
        else {
            for(int val=1; val<=9; val++)
            {
                if(isSafe(board, row, col, val))
                {
                    board[row][col] = val+'0';
                    bool res = solver(board, nextRow, nextCol);
                    if(res)
                        return true;
                    
                    board[row][col] = '.';
                }
            }        
            
        }
        
        return false;
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        
        solver(board, 0, 0);
    }
    
    
    //--------------------------------------------------------- Iterative Solutions ---------------------------------------------------------
    bool solver(vector<vector<char>>& board) {
        
        int n = board.size();
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j] == '.')
                {
                    for(int val=1; val<=9; val++)
                    {
                        if(isSafe(board, i, j, val))
                        {
                            board[i][j] = val+'0';
                            bool aagewlaans = solver(board);
                            if(aagewlaans)
                                return true;
                            else
                                board[i][j] = '.';
                        }
                    }
                    
                    return false;
                }
            }
        }
        
        return true;
        
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        
        solver(board);
    }
    
};
