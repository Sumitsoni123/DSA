class Pair {
public:
    Node* node;
    int state;

    Pair(Node* node, int state) : node(node), state(state) {}
};

void IterativePreandPostOrder(Node* node) {
    std::stack<Pair> stk;
    Pair rootPair = Pair(node, -1);
    stk.push(rootPair);

    std::vector<int> preorder;
    std::vector<int> postorder;

    while (!stk.empty()) {
        Pair parent = stk.top();
        stk.pop();

        if (parent.state == -1) {
            // preorder
            preorder.push_back(parent.node->data);
            parent.state++;
            stk.push(parent);
            
            for (int i = parent.node->children.size() - 1; i >= 0; --i) {
                Pair child = Pair(parent.node->children[i], -1);
                stk.push(child);
            }
        } else {
            // postorder
            postorder.push_back(parent.node->data);
        }
    }

    for (int i : preorder) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    for (int i : postorder) {
        std::cout << i << " ";
    }
}
