// ----   TC - O{n^2} --------

Node getLastNode(Node node) {
    while (!node.children.empty()) {
        node = node.children[0];
    }
    return node;
}

void linearize(Node& node) {
    for (Node& child : node.children) {
        linearize(child);
    }

    while (node.children.size() > 1) {
        Node tree2 = node.children.back();
        node.children.pop_back();

        Node& tree1 = node.children.back();

        Node lastNode = getLastNode(tree1);
        lastNode.children.push_back(tree2);
    }
}


// ------  TC - O(n)  ----------------
Node* linearizeOpt(Node* node) {
    if (node->children.size() == 0) {
        return node;
    }

    Node* lastTreeTail = linearizeOpt(node->children[node->children.size() - 1]);

    while (node->children.size() > 1) {
        Node* lastTreeHead = node->children[node->children.size() - 1];
        node->children.pop_back();
        Node* secondLastTreeTail = linearizeOpt(node->children[node->children.size() - 1]);

        secondLastTreeTail->children.push_back(lastTreeHead);
    }

    return lastTreeTail;
}
