class Node {
public:
    int data;
    std::vector<Node*> children;

    Node(int val) : data(val) {}
};

void display(Node* node) {
    std::cout << node->data << " -> ";
    for (Node* child : node->children) {
        std::cout << child->data << ", ";
    }
    std::cout << "." << std::endl;

    for (Node* child : node->children) {
        display(child);
    }
}

Node* construct(const std::vector<int>& arr) {
    Node* root = nullptr;
    std::stack<Node*> st;

    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == -1) {
            st.pop();
        } else {
            Node* t = new Node(arr[i]);

            if (!st.empty()) {
                st.top()->children.push_back(t);
            } else {
                root = t;
            }

            st.push(t);
        }
    }

    return root;
}

int size(Node* node) {
    int s = 0;

    for (Node* child : node->children) {
        s += size(child);
    }
    s += 1;

    return s;
}

int max(Node* node) {
    int m = INT_MIN;

    for (Node* child : node->children) {
        int cm = max(child);
        m = std::max(m, cm);
    }
    m = std::max(m, node->data);

    return m;
}

int height(Node* node) {
    int h = -1;

    for (Node* child : node->children) {
        int ch = height(child);
        h = std::max(h, ch);
    }
    h += 1;

    return h;
}

void traversals(Node* node) {
    std::cout << "Node Pre " << node->data << std::endl;

    for (Node* child : node->children) {
        std::cout << "Edge Pre " << node->data << "--" << child->data << std::endl;
        traversals(child);
        std::cout << "Edge Post " << node->data << "--" << child->data << std::endl;
    }

    std::cout << "Node Post " << node->data << std::endl;
}
