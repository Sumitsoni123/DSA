#include <iostream>
#include <vector>
#include <stack>

class Node {
public:
    int data;
    std::vector<Node*> children;

    Node() : data(0) {}
};

void display(Node* node) {
    std::cout << node->data << " -> ";
    for (Node* child : node->children) {
        std::cout << child->data << ", ";
    }
    std::cout << "." << std::endl;

    for (Node* child : node->children) {
        display(child);
    }
}

Node* construct(const std::vector<int>& arr) {
    Node* root = nullptr;
    std::stack<Node*> st;

    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == -1) {
            st.pop();
        } else {
            Node* t = new Node();
            t->data = arr[i];

            if (!st.empty()) {
                st.top()->children.push_back(t);
            } else {
                root = t;
            }

            st.push(t);
        }
    }

    return root;
}

int mSum = 0;
int mSumNode = 0;

int nodeWithMaximumSubtreeSum(Node* node) {
    int sum = 0;
    for (Node* child : node->children) {
        int cstSum = nodeWithMaximumSubtreeSum(child);
        sum += cstSum;
    }
    sum += node->data;

    if (sum > mSum) {
        mSum = sum;
        mSumNode = node->data;
    }

    return sum;
}

int main() {
    int n;
    std::cin >> n;

    std::vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }

    Node* root = construct(arr);
    nodeWithMaximumSubtreeSum(root);

    std::cout << mSumNode << "@" << mSum << std::endl;

    return 0;
}
