#include <iostream>
#include <stack>
#include <vector>
#include <climits>

using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int data, Node* left, Node* right) : data(data), left(left), right(right) {}
};

class Pair {
public:
    Node* node;
    int state;

    Pair(Node* node, int state) : node(node), state(state) {}
};

Node* construct(vector<int>& arr) {
    Node* root = new Node(arr[0], nullptr, nullptr);
    Pair rtp = Pair(root, -1);

    stack<Pair> st;
    st.push(rtp);

    int idx = 0;
    while (st.size() > 0) {
        Pair top = st.top();
        if (top.state == -1) {
            idx++;
            if (arr[idx] != NULL) {
                top.node->left = new Node(arr[idx], nullptr, nullptr);
                Pair lp = Pair(top.node->left, -1);
                st.push(lp);
            } else {
                top.node->left = nullptr;
            }

            top.state++;
        } else if (top.state == 0) {
            idx++;
            if (arr[idx] != NULL) {
                top.node->right = new Node(arr[idx], nullptr, nullptr);
                Pair rp = Pair(top.node->right, -1);
                st.push(rp);
            } else {
                top.node->right = nullptr;
            }

            top.state++;
        } else {
            st.pop();
        }
    }

    return root;
}

void display(Node* node) {
    if (node == nullptr) {
        return;
    }

    string str = "";
    str += (node->left == nullptr) ? "." : to_string(node->left->data);
    str += " <- " + to_string(node->data) + " -> ";
    str += (node->right == nullptr) ? "." : to_string(node->right->data);
    cout << str << endl;

    display(node->left);
    display(node->right);
}

int size(Node* node) {
    if (node == nullptr) {
        return 0;
    }

    int ls = size(node->left);
    int rs = size(node->right);
    int ts = ls + rs + 1;
    return ts;
}

int sum(Node* node) {
    if (node == nullptr) {
        return 0;
    }

    int ls = sum(node->left);
    int rs = sum(node->right);
    int ts = ls + rs + node->data;
    return ts;
}

int findMax(Node* node) {
    if (node == nullptr) {
        return INT_MIN;
    }

    int lm = findMax(node->left);
    int rm = findMax(node->right);
    int tm = max(node->data, max(lm, rm));
    return tm;
}

int height(Node* node) {
    if (node == nullptr) {
        return -1;
    }

    int lh = height(node->left);
    int rh = height(node->right);
    int th = max(lh, rh) + 1;
    return th;
}

int main() {
    int n;
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        string value;
        cin >> value;
        if (value != "n") {
            arr[i] = stoi(value);
        } else {
            arr[i] = NULL;
        }
    }

    Node* root = construct(arr);

    int treeSize = size(root);
    int treeSum = sum(root);
    int maxElement = findMax(root);
    int treeHeight = height(root);

    cout << treeSize << endl;
    cout << treeSum << endl;
    cout << maxElement << endl;
    cout << treeHeight << endl;

    return 0;
}
