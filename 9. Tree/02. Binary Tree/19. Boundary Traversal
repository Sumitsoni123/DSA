class Solution {
public:
    bool isLeaf(Node* root) {
        if(root->left == NULL && root->right == NULL)
            return true;
        return false;    
    }
    
    void addLeftNodes(Node* node, vector<int> &ans) {
        while(node) {
            if(!isLeaf(node))
                ans.push_back(node->data);
            if(node->left)
                node = node->left;
            else 
                node = node->right;
        }   
    }
    
    void addLeafNodes(Node* node, vector<int> &ans) {
        if(isLeaf(node)) {
            ans.push_back(node->data);
            return;
        }
        if(node->left) addLeafNodes(node->left, ans);
        if(node->right) addLeafNodes(node->right, ans);
    }
    
    void addRightNodes(Node* node, vector<int> &ans) {
        vector<int> temp;
         while(node) {
            if(!isLeaf(node))
                temp.push_back(node->data);
            if(node->right)
                node = node->right;
            else 
                node = node->left;
        } 
        for(int i=0; i<temp.size(); i++)
            ans.push_back(temp[temp.size()-i-1]);
        
    }
    
    vector<int> boundary(Node *root) {
        vector<int> ans;
        if(!root) 
            return ans;
        
        if(!isLeaf(root))  ans.push_back(root->data);
        
        addLeftNodes(root->left, ans);
        addLeafNodes(root, ans);
        addRightNodes(root->right, ans);
        
        return ans;
    }
};
