Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.


class Solution {
public:
    TreeNode* getRightNode(TreeNode* root) {
        if(root->right == NULL)
            return root;
        return getRightNode(root->right);
    }
    TreeNode* helper(TreeNode* root) {
        if(root->left == NULL) 
            return root->right;
        if(root->right == NULL) 
            return root->left;

        TreeNode* rightChild = root->right;
        TreeNode* leftRightMost = getRightNode(root->left);
        leftRightMost->right = rightChild;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL)    
            return NULL;

        if(root->val == key) 
            return helper(root);

        TreeNode* temp = root;
        while(temp) {
            if(key < temp->val) {
                if(temp->left && temp->left->val == key) {
                    temp->left = helper(temp->left);
                    break;
                } 
                else 
                    temp = temp->left;
            }
            else {
                if(temp->right && temp->right->val == key) {
                    temp->right = helper(temp->right);
                    break;
                } 
                else 
                    temp = temp->right;
            }
        }
        return root;
    }
};
