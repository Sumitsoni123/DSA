Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode * root, vector<TreeNode*> &inorder) {
        if (!root) return;

        helper(root->left, inorder);
        inorder.push_back(root);
        helper(root->right, inorder);
    }
    TreeNode* inorderToBST(int s, int e, vector<TreeNode*> &inorder) {
        if (s > e)
            return NULL;

        int mid = s + (e - s) / 2;
        TreeNode* root = new TreeNode((inorder[mid])->val);
        root->left = inorderToBST(s, mid - 1, inorder);
        root->right = inorderToBST(mid + 1, e, inorder);
        return root;
    }
    TreeNode* balanceBST(TreeNode * root) {
        vector<TreeNode*> inorder;
        helper(root, inorder);

        return inorderToBST(0, inorder.size() - 1, inorder);
    }
};
