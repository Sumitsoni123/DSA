Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.


class BSTIterator {
private:    
    stack<TreeNode*> stk;
    bool reverse = false;
    void pushAll(TreeNode* root) {
        while(root) {
            stk.push(root);
            if(reverse)
                root = root->right;
            else 
                root = root->left;    
        }
    }
public:    
    BSTIterator(TreeNode* root, bool isReverse) {
        reverse = isReverse;
        pushAll(root);
    }
    
    bool hasNext() {
        return !stk.empty();
    }

    int next() {
        TreeNode* temp = stk.top();
        stk.pop();
        if(!reverse) 
            pushAll(temp->right);
        else
            pushAll(temp->left);
        return temp->val;        
    }
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if (!root) return false;
        
        BSTIterator* left = new BSTIterator(root, false);
        BSTIterator* right = new BSTIterator(root, true);

        int i = left->next();
        int j = right->next();
        while (i != j) {
            if (i + j == k) return true;
            else if (i + j < k) i = left->next();
            else j = right->next();
        }

        return false;
    
    }
};
