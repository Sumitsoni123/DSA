You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.




class Solution {
public:
    
    int helper(string s, int k, char ch) {
        
        int left = 0, maxLen = -1, cnt = 0;
        for(int right = 0; right < s.length(); right++)
        {
            if(s[right] != ch)
                cnt++;
            
            while(cnt > k)
            {
                if(s[left] != ch)
                    cnt--;
                left++;
            }
            
            maxLen = max(maxLen, right - left + 1);
        }
        
        return maxLen;
    }
    
    int characterReplacement(string s, int k) {
        
        int ans = 0;
        for(int ch = 0; ch < 26; ch++)
        {
            ans = max(ans, helper(s, k, (char)ch+'A'));
        }
        
        return ans;
    }
};
