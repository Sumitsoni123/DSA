Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.



#include <bits/stdc++.h>
using namespace std;


class Solution{
  public:
    int longestKSubstr(string str, int k) {
    // your code here
        int left = 0, maxLen = INT_MIN, start = 0;
        unordered_map<char, int> frq;
        for(int right = 0; right < str.length(); right++)
        {
            frq[str[right]]++;
            
            while(frq.size() > k)
            {
                frq[str[left]]--;
                
                if(frq[str[left]] == 0)
                    frq.erase(str[left]);
                
                left++;    
            }                
            
            if(frq.size() == k)
                maxLen = max(maxLen, right - left +1);    
        }
        
        if(maxLen == INT_MIN) return -1;
        return maxLen;
    }
};


// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        int k;
        cin >> k;
        Solution ob;
        cout << ob.longestKSubstr(s, k) << endl;
    }
}
  // } Driver Code Ends
